include mime.conf;
include performance.conf;
include rate_limiting.conf;
include compression.conf;

server_tokens off; # TODO: server_tokens none (NGINX-MOD) or server_tokens "" (NGINX Plus)

# TODO: closed API on a subdomain for monitoring (https://docs.nginx.com/nginx/admin-guide/monitoring/live-activity-monitoring/), updating keyzones (https://docs.nginx.com/nginx/admin-guide/security-controls/denylisting-ip-addresses/), upstreams configuration (https://docs.nginx.com/nginx/admin-guide/load-balancer/dynamic-configuration-api/), protected by SSO (https://docs.nginx.com/nginx/deployment-guides/single-sign-on/cognito/), etc (FEAT, NGINX Plus)

# TODO: keepalived (https://docs.nginx.com/nginx/admin-guide/high-availability/ha-keepalived/, https://docs.nginx.com/nginx/admin-guide/high-availability/ha-keepalived-nodes/, https://docs.nginx.com/nginx/deployment-guides/amazon-web-services/)? (FEAT, NGINX Plus, SHARESTATE)

proxy_cache_path $NGINX_PROXY_CACHE keys_zone=cache:10m inactive=1d max_size=10g; # TODO: configure (TWEAK)

resolver $NGINX_RESOLVER; # TODO: test if this is needed (TEST)

upstream main_backend {
	random; # TODO: if keepalived would be used, then a more intelligent algorithm could be used (SHARESTATE)
	# TODO: zones (SHARESTATE)

	keepalive 32; # TODO: configure (TWEAK)

	server $NGINX_MAIN_BACKEND; # TODO: slow_start=30s (NGINX Plus)
	# TODO: test if this works with Kubernetes, or if it requires NGINX Plus to resolve (TEST)

	# TODO: health checks (NGINX Plus)
}

upstream chat_backend {
	random;
	server $NGINX_CHAT_BACKEND;
}

upstream game_backend {
	random;
	server $NGINX_GAME_BACKEND;
}

map $status $retry_after {
	default '';
	429 5; # TODO: configure (TWEAK)
}

# see https://stackoverflow.com/a/69540402 for description of headers in Nginx

map $http_upgrade $connection_upgrade { # TODO: test this (TEST)
	default Upgrade;
	''      '';
}

map $upstream_http_cache_control $proxy_no_cache {
	default 0;
	~*no-store 1;
}

# TODO: allow subdomains? (FEAT)

# block requests with invalid Host header
server {
	listen [::]:80 ipv6only=off deferred reuseport default_server; # specifying bind options once per address-port specifies them for all other listen directives with same address-port
	return 444;
}
server {
	listen [::]:443 ipv6only=off deferred reuseport default_server ssl http2;
	ssl_reject_handshake on;
	return 444;
}

# forward to https and non-www
server {
	listen [::]:80;
	server_name $NGINX_DOMAIN_NAME www.$NGINX_DOMAIN_NAME;
	return 308 https://$NGINX_DOMAIN_NAME$request_uri;
}
server {
	listen [::]:443 ssl http2;
	server_name www.$NGINX_DOMAIN_NAME;
	include ssl.conf;
	include hsts.conf;
	return 308 https://$NGINX_DOMAIN_NAME$request_uri;
}

# main
server {
	# TODO: find more directives (FEAT)

	listen [::]:443 ssl http2;
	server_name $NGINX_DOMAIN_NAME;

	include ssl.conf;

	error_page 400 405 $NGINX_ERROR_BAD_REQUEST;
	error_page 403 $NGINX_ERROR_FORBIDDEN;
	error_page 404 $NGINX_ERROR_NOT_FOUND;
	error_page 413 414 431 $NGINX_ERROR_TOO_LARGE;
	error_page 429 $NGINX_ERROR_TOO_MANY_REQUESTS;
	error_page 500 $NGINX_ERROR_INTERNAL;
	error_page 502 503 504 =503 $NGINX_ERROR_SERVICE_UNAVAILABLE; # TODO: or maintenance (FEAT)
	# TODO: 415? (FEAT)
	# TODO: Retry-After for 503? (FEAT)

	# unmatched by regular expressions - ignore them
	location / {
		return 404;
	}

	# block potentially sensitive files: https://github.com/h5bp/server-configs-nginx/blob/main/h5bp/location/security_file_access.conf, https://feross.org/cmsploit/
	location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|orig|psd|sh|sql|sw[op]))$ {
		return 404;
	}

	# static file with hash - remove hash from the path and serve file from build directory
	location ~ "^((?:/[\w-]+)+)-[0-9a-f]{64}(\.[a-z0-9]+)$" { # hash is 32 byte BLAKE3
	                                                          # TODO: use base64 with it (FEAT)
		include static.conf;

		etag off;
		add_header Cache-Control "public, max-age=31536000, stale-while-revalidate=31536000, stale-if-error=31536000, immutable";
	}

	# static file without hash - serve file from build directory
	location ~ ^((?:/[\w-]+)+)(\.[a-z0-9]+)$ {
		include static.conf;

		etag on;
		add_header Cache-Control "no-cache";
	}

	# websocket - forward to the JS server
	location = $NGINX_CHAT_WEBSOCKET_URL {
		include websocket.conf;
		proxy_pass http://chat_backend;
	}
	location = $NGINX_GAME_WEBSOCKET_URL {
		include websocket.conf;
		proxy_pass http://game_backend;
	}

	# dynamic file - forward to the JS server
	location ~ ^((?:/[0-9a-zA-Z\-_]+)+|/)$ {
		include dynamic.conf;
		proxy_pass http://main_backend;

		etag off; # backend can use ETag and If-None-Match on its own
		proxy_set_header Cache-Control "no-store";
	}
}
