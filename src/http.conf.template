include mime.conf;
include rate_limiting.conf;
include compression.conf;

server_tokens off; # TODO: server_tokens none (NGINX-MOD) or server_tokens "" (NGINX Plus)

# TODO: closed API on a subdomain for monitoring (https://docs.nginx.com/nginx/admin-guide/monitoring/live-activity-monitoring/), updating keyzones (https://docs.nginx.com/nginx/admin-guide/security-controls/denylisting-ip-addresses/), upstreams configuration (https://docs.nginx.com/nginx/admin-guide/load-balancer/dynamic-configuration-api/), etc (FEAT, NGINX Plus)

# TODO: keepalived (https://docs.nginx.com/nginx/admin-guide/high-availability/ha-keepalived/, https://docs.nginx.com/nginx/admin-guide/high-availability/ha-keepalived-nodes/)? (FEAT, NGINX Plus, SHARESTATE)

proxy_cache_path /var/nginx/cache keys_zone=cache:10m inactive=1d max_size=10g;

resolver $NGINX_RESOLVER; # TODO: test if this is needed (TEST)

upstream main_backend {
	random; # TODO: if keepalived would be used, then a more intelligent algorithm could be used (SHARESTATE)
	# TODO: zones (SHARESTATE)

	keepalive 8; # TODO: configure (TWEAK)

	server $NGINX_MAIN_BACKEND; # TODO: slow_start=30s (NGINX Plus)
	# TODO: test if this works with Kubernetes, or if it requires NGINX Plus to resolve (TEST)

	# TODO: health checks (NGINX Plus)
}

upstream chat_backend {
	random;
	server $NGINX_CHAT_BACKEND;
}

upstream game_backend {
	random;
	server $NGINX_GAME_BACKEND;
}

map $status $retry_after {
	default '';
	429 5;
}

# see https://stackoverflow.com/a/69540402 for description of headers in Nginx

map $http_upgrade $connection_upgrade { # TODO: test this (TEST)
	default Upgrade;
	''      '';
}

map $upstream_http_cache_control $proxy_no_cache {
	default 0;
	~*no-store 1;
}

# TODO: allow subdomains? (FEAT)

# block requests with invalid Host header
server {
	listen [::]:80 default_server;
	listen 80 default_server;
	return 404;
}
server {
	listen [::]:443 ssl http2 default_server;
	listen 443 ssl http2 default_server;
	ssl_reject_handshake on;
	return 404;
}

# forward to https and non-www
server {
	listen [::]:80;
	listen 80;
	server_name $NGINX_DOMAIN_NAME www.$NGINX_DOMAIN_NAME;
	return 308 https://$NGINX_DOMAIN_NAME$request_uri;
}
server {
	listen [::]:443 ssl http2;
	listen 443 ssl http2;
	server_name www.$NGINX_DOMAIN_NAME;
	include ssl.conf;
	include hsts.conf;
	return 308 https://$NGINX_DOMAIN_NAME$request_uri;
}

# main
server {
	# TODO: find more directives (FEAT)
	# TODO: client_max_body_size, client_body_buffer_size and others (TWEAK)
	# TODO: keepalive_timeout (TWEAK)

	listen [::]:443 ssl http2;
	listen 443 ssl http2;
	server_name $NGINX_DOMAIN_NAME;

	include ssl.conf;

	tcp_nopush on;
	tcp_nodelay on;

	sendfile on;
	sendfile_max_chunk 2m; # TODO: configure and investigate directio aio output_buffers (FEAT and TWEAK)

	# TODO: open_file_cache? (FEAT)

	error_page 400 405 $NGINX_ERROR_BAD_REQUEST;
	error_page 403 $NGINX_ERROR_FORBIDDEN;
	error_page 404 $NGINX_ERROR_NOT_FOUND;
	error_page 413 414 431 $NGINX_ERROR_TOO_LARGE;
	error_page 429 $NGINX_ERROR_TOO_MANY_REQUESTS;
	error_page 500 $NGINX_ERROR_INTERNAL;
	error_page 502 503 504 =503 $NGINX_ERROR_SERVICE_UNAVAILABLE; # TODO: or maintenance (FEAT)
	# TODO: 415? (FEAT)
	# TODO: Retry-After for 503? (FEAT)

	# unmatched by regular expressions - ignore them
	location / {
		return 404;
	}

	# TODO: set headers only when needed - for example only on HTML pages (FEAT)

	# static file with hash - remove hash from the path and serve file from build directory
	location ~ "^((?:/[\w-]+)+)-[0-9a-f]{64}(\.[a-z0-9]+)$" { # hash is 32 byte BLAKE3
	                                                          # TODO: use base64 with it (FEAT)
		include static.conf;

		etag off;
		add_header Cache-Control "public, max-age=31536000, stale-while-revalidate=31536000, stale-if-error=31536000, immutable";
	}

	# static file without hash - serve file from build directory
	location ~ ^((?:/[\w-]+)+)(\.[a-z0-9]+)$ {
		include static.conf;

		etag on;
		add_header Cache-Control "no-cache";
	}

	# websocket - forward to the JS server
	location = $NGINX_CHAT_WEBSOCKET_URL {
		include websocket.conf;
		proxy_pass http://chat_backend;
	}
	location = $NGINX_GAME_WEBSOCKET_URL {
		include websocket.conf;
		proxy_pass http://game_backend;
	}

	# dynamic file - forward to the JS server
	location ~ ^((?:/[0-9a-zA-Z\-_]+)+|/)$ {
		include headers.conf;
		include proxy.conf;

		# proxy_set_headers are used by the backend as "default" header values

		proxy_set_header Content-Security-Policy "default-src 'none'; upgrade-insecure-requests; report-uri $NGINX_REPORT_URL; report-to endpoint"; # report-uri is deprecated (DEPR)
		proxy_set_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), camera=(), display-capture=(), document-domain=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), gamepad=(), geolocation=(), gyroscope=(), interest-cohort=(), layout-animations=(), legacy-image-formats=(), magnetometer=(), microphone=(), midi=(), navigation-override=(), oversized-images=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), speaker-selection=(), sync-xhr=(), unoptimized-images=(), unsized-media=(), usb=(), vr=(), wake-lock=(), screen-wake-lock=(), web-share=(), xr-spatial-tracking=()"; # wake-lock (not screen-wake-lock) is deprecated (DEPR)
		proxy_set_header Document-Policy "document-write=?0 *;report-to=endpoint"; # TODO: update that when a list of supported policies would be available (DP)
		proxy_set_header Feature-Policy "accelerometer 'none'; ambient-light-sensor 'none'; autoplay 'none'; battery 'none'; camera 'none'; display-capture 'none'; document-domain 'none'; encrypted-media 'none'; execution-while-not-rendered 'none'; execution-while-out-of-viewport 'none'; fullscreen 'none'; gamepad 'none'; geolocation 'none'; gyroscope 'none'; layout-animations 'none'; legacy-image-formats 'none'; magnetometer 'none'; microphone 'none'; midi 'none'; navigation-override 'none'; oversized-images 'none'; payment 'none'; picture-in-picture 'none'; publickey-credentials-get 'none'; speaker-selection 'none'; sync-xhr 'none'; unoptimized-images 'none'; unsized-media 'none'; usb 'none'; vr 'none'; wake-lock 'none'; screen-wake-lock 'none'; web-share 'none'; xr-spatial-tracking 'none'"; # deprecated (DEPR)

		proxy_pass http://main_backend;

		proxy_redirect off;

		# TODO: proxy timeouts (FEAT and TWEAK)
		# TODO: proxy buffering (FEAT and TWEAK)

		etag off; # backend can use ETag and If-None-Match on its own
		proxy_set_header Cache-Control "no-store";

		proxy_cache cache;
		proxy_cache_bypass $proxy_no_cache;
		proxy_no_cache $proxy_no_cache;
		proxy_cache_revalidate on;
		proxy_cache_valid 200 206 404 1d;

		proxy_cache_lock on;
		proxy_cache_lock_timeout 10s;
		proxy_cache_lock_age 60s;
		proxy_cache_use_stale updating;

		slice 1m;
		proxy_cache_key $uri$is_args$args$slice_range;
		proxy_set_header Range $slice_range;

		proxy_cookie_domain ~^$ $host;
		proxy_cookie_flags ~ secure httponly samesite=lax;
		proxy_cookie_path ~^$ /;
	}
}
